{"version":3,"sources":["../src/index.ts","../src/functions/validate/validateDomain.ts","../src/functions/client/tickets/getTicketByIdClient.ts","../src/functions/client/tickets/deleteTicketById.ts","../src/functions/client/tickets/getAllTicketsClient.ts","../src/functions/client/tickets/replyToTicketClient.ts","../src/functions/client/tickets/makeNewtTicketClient.ts","../src/functions/client/tickets/getAllMessagesFromTicketClient.ts","../src/functions/client/invoices/getInvoiceByIdClient.ts","../src/functions/client/invoices/getAllInvoicesClient.ts","../src/classes/client/Client.ts","../src/functions/admin/tickets/createAdminTicket.ts","../src/functions/admin/tickets/getTicketByIdAdmin.ts","../src/functions/admin/tickets/replyAdminTicket.ts","../src/functions/admin/tickets/changeTicketStatusAdmin.ts","../src/functions/admin/tickets/getAllAdminTickets.ts","../src/functions/admin/tickets/getAllTicketMessagesAdmin.ts","../src/functions/admin/invoices/getInvoiceDataAdmin.ts","../src/functions/admin/invoices/payInvoiceAdmin.ts","../src/functions/admin/invoices/getAllInvoices.ts","../src/classes/admin/Admin.ts"],"sourcesContent":["import Client from \"./classes/client/Client\";\nimport Admin from \"./classes/admin/Admin\";\n\nexport {\n    Client,\n    Admin\n}","export default function validateDomain (panelDomain: string) {\n    const panel = `${panelDomain}`;\n    if (!panel.startsWith(\"https\") || !panel.startsWith(\"http\")) {\n        throw new TypeError(\"Panel domain must start with https or http!\")\n    }\n}","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Gets the ticket data by the ticket id from a client\n * @param panel - The panel domain \n * @param apikey - The client api key\n * @param ticket_id - The ticket id to fetch the data from\n * @returns The data of the ticket\n */\nexport default async function getTicketByIdClient (panel: string, apikey: string, ticket_id: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/client/v1/tickets/${ticket_id}`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authroization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\nexport default async function deleteTicketByIdClient (panel: string, apikey: string, ticketId: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/client/v1/tickets/${ticketId}/close`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"DELETE\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Get all tickets as client\n * @param panel - the panel domain \n * @param apiKey - the api key of the client\n * @returns the response data\n */\nexport default async function getAllTicketsClient (panel: string, apiKey: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/client/v1/tickets`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apiKey}`\n        },\n        method: \"GET\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Reply to a ticket as client\n * @param panel - The panel domain\n * @param apikey - The api key of the client\n * @param message - The message to send in the ticket\n * @param ticketId -The id of the ticket\n * @returns The ticket messages\n */\nexport default async function replyToTicketAsClient (panel: string, apikey: string, message: string, ticketId: string) {\n    validateDomain(panel);\n\n    const body = JSON.stringify({\n        \"message\": message\n    });\n\n    return await fetch(`${panel}/api/client/v1/tickets/${ticketId}/reply`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        body: body,\n        method: \"POST\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Create a new ticket as client\n * @param panel - The panel domain\n * @param apikey - The api key of the client\n * @param title - The title of the ticket\n * @param message - The first message sent to the ticket\n * @param priority - The priority of the ticket\n * @returns The data of the ticket created\n */\nexport default async function makeNewTicketClient (panel: string, apikey: string, title: string, message: string, priority: \"low\" | \"medium\" | \"high\") {\n    validateDomain(panel);\n\n    const body = JSON.stringify({\n        \"title\": title,\n        \"message\": message,\n        \"priority\": priority\n    });\n\n    return await fetch(`${panel}/api/client/v1/tickets`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        body: body,\n        method: \"POST\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\nexport default async function getAllMessagesFromTicketClient (panel: string, apikey: string, ticketId: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/client/v1/tickets/${ticketId}/messages`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Get all invoice data from a specific invoice id\n * @param panel - The panel domain\n * @param apikey - The api key\n * @param invoiceId - The invoice id\n * @returns All invoice data by the invoice id\n */\nexport default async function getInvoiceByIdClient (panel: string, apikey: string, invoiceId: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/client/v1/invoices/${invoiceId}`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Gets all invoices from a client\n * @param panel - The panel domain\n * @param apikey - the api key of the client\n * @returns all invoice data\n */\nexport default async function getAllInvoicesClient (panel: string, apikey: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/client/v1/invoices/`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    })\n}","import getTicketByIdClient from \"../../functions/client/tickets/getTicketByIdClient\";\nimport deleteTicketByIdClient from \"../../functions/client/tickets/deleteTicketById\";\nimport getAllTicketsClient from \"../../functions/client/tickets/getAllTicketsClient\";\nimport replyToTicketAsClient from \"../../functions/client/tickets/replyToTicketClient\";\nimport makeNewTicketClient from \"../../functions/client/tickets/makeNewtTicketClient\";\nimport getAllMessagesFromTicketClient from \"../../functions/client/tickets/getAllMessagesFromTicketClient\";\n\nimport getInvoiceByIdClient from \"../../functions/client/invoices/getInvoiceByIdClient\";\nimport getAllInvoicesClient from \"../../functions/client/invoices/getAllInvoicesClient\";\n\nclass Client {\n  /**\n   * Ticket-related operations for the client.\n   */\n  static Ticket = class {\n    /**\n     * Creates a new ticket.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.title - The title of the ticket.\n     * @param options.description - The description of the ticket.\n     * @param options.priority - Priority of the ticket ('low', 'medium', 'high').\n     * @returns The data from the API after creating the ticket.\n     */\n    static async create(options: {\n      panel: string;\n      apikey: string;\n      title: string;\n      description: string;\n      priority: \"medium\" | \"low\" | \"high\";\n    }) {\n      return await makeNewTicketClient(\n        options.panel,\n        options.apikey,\n        options.title,\n        options.description,\n        options.priority\n      );\n    }\n\n    /**\n     * Retrieves ticket details by its ID.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.ticketId - The ID of the ticket.\n     * @returns The ticket details from the API.\n     */\n    static async getById(options: { panel: string; apikey: string; ticketId: string }) {\n      return await getTicketByIdClient(options.panel, options.apikey, options.ticketId);\n    }\n\n    /**\n     * Deletes a ticket by its ID.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.ticketId - The ID of the ticket.\n     * @returns The response data from the API after deleting the ticket.\n     */\n    static async deleteById(options: { panel: string; apikey: string; ticketId: string }) {\n      return await deleteTicketByIdClient(options.panel, options.apikey, options.ticketId);\n    }\n\n    /**\n     * Replies to a specific ticket.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.ticketId - The ID of the ticket to reply to.\n     * @param options.message - The content of the reply message.\n     * @returns The response data from the API after sending the reply.\n     */\n    static async reply(options: { panel: string; apikey: string; ticketId: string; message: string }) {\n      return await replyToTicketAsClient(options.panel, options.apikey, options.ticketId, options.message);\n    }\n\n    /**\n     * Retrieves all tickets from the system.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @returns The list of all tickets from the API.\n     */\n    static async getAll(options: { panel: string; apikey: string }) {\n      return await getAllTicketsClient(options.panel, options.apikey);\n    }\n\n    /**\n     * Retrieves all messages from a specific ticket.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.ticketId - The ID of the ticket.\n     * @returns The list of all messages from the API for the specified ticket.\n     */\n    static async getMessages(options: { panel: string; apikey: string; ticketId: string }) {\n      return await getAllMessagesFromTicketClient(options.panel, options.apikey, options.ticketId);\n    }\n  };\n\n  /**\n   * Invoice-related operations for the client.\n   */\n  static Invoice = class {\n    /**\n     * Retrieves invoice details by its ID.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.invoiceId - The ID of the invoice.\n     * @returns The invoice details from the API.\n     */\n    static async getById(options: { panel: string; apikey: string; invoiceId: string }) {\n      return await getInvoiceByIdClient(options.panel, options.apikey, options.invoiceId);\n    }\n\n    /**\n     * Retrieves all invoices from the system.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @returns The list of all invoices from the API.\n     */\n    static async getAll(options: { panel: string; apikey: string }) {\n      return await getAllInvoicesClient(options.panel, options.apikey);\n    }\n  };\n}\n\nexport default Client;","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Create a ticket as admin on a user\n * @param {string} panel - The panel domain \n * @param {string} apikey - The api key\n * @param {string} title - The title for the ticket\n * @param {string} message - The first message sent into the ticket\n * @param {\"medium\" | \"low\" | \"high\"} priority \n * @param {number} user_id - The \n * @returns Response data\n */\nexport default async function createAdminTicket (panel: string, apikey: string, title: string, message: string, priority: \"medium\"| \"low\" | \"high\", user_id: number) {\n    validateDomain(panel);\n\n    const body = JSON.stringify({\n        \"title\": title,\n        \"message\": message,\n        \"priority\": priority,\n        \"user_id\": user_id\n    });\n\n    const response = await fetch(`${panel}/api/admin/v1/tickets`, {\n        headers: {\n            \"Authorization\": `Bearer ${apikey}`,\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        },\n        body: body,\n        method: \"POST\"\n    });\n\n    return response;\n}","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Get all data from a specific ticket\n * @param panel - The panel domain\n * @param apikey - The api key\n * @param ticketid - The id of the ticket\n * @returns The data from the ticket\n */\nexport default async function getTicketByIdAdmin (panel: string, apikey: string, ticketid: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/admin/v1/tickets/${ticketid}`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n/**\n * Reply to a ticket as admin\n * @param panel - The panel domain\n * @param apikey - The api key\n * @param ticketId - The ticket id to reply to\n * @param message - The message to send\n * @returns The data from the fetch\n */\n\nexport default async function replyToTicketAsAdmin (panel: string, apikey: string, ticketId: string, message: string) {\n    validateDomain(panel);\n    const body = JSON.stringify({\n        \"message\": message\n    });\n\n    return await fetch(`${panel}/api/v1/tickets/${ticketId}/reply`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        body: body,\n        method: \"POST\"\n    })\n}","/**\n * Change the status of a ticket as admin\n * @param {string} apikey - The admin api key\n * @param {string} panel - The panel domain\n * @param {string} ticketId - The ticket id\n * @param {\"open\"| \"closed\"} status - The status of the ticket\n * @returns response data\n */\n\nimport validateDomain from \"../../validate/validateDomain\";\n\nexport default async function changeTicketStatusAdmin (apikey: string, panel: string, ticketId: string, status: \"open\" | \"closed\") {\n    const body = JSON.stringify({\n        \"status\": status\n    });\n\n    validateDomain(panel);\n\n    const response = await fetch(`${panel}/api/admin/v1/tickets/${ticketId}/status`, {\n        headers: {\n            \"Authorization\": `Bearer ${ticketId}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: body,\n        method: \"PUT\"\n    });\n    \n    return response;\n}","import validateDomain from \"../../validate/validateDomain\";\n/**\n * Get all tickets from the panel\n * @param panel - The panel domain\n * @param apikey - The api key\n * @returns The response data\n */\nexport default async function getAllTickets (panel: string, apikey: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/admin/v1/tickets`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    });\n}","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Get all messages from a ticket\n * @param panel - The panel domain\n * @param apikey - The admin apikey\n * @param ticketId - The id of the ticket\n * @returns All ticket messages\n */\nexport default async function getAllTicketMessages (panel: string, apikey: string, ticketId: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/v1/tickets/${ticketId}`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\nexport default async function getInvoiceDatabyIdAdmin (panel: string, apikey: string, invoiceId: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/admin/v1/admin/${invoiceId}`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    })\n}","import validateDomain from \"../../validate/validateDomain\";\n\nexport default async function payInvoiceAdmin (panel: string, apikey: string, invoiceId: string, payment_method: string) {\n    validateDomain(panel);\n\n    const body = JSON.stringify({\n        \"payment_method\": payment_method\n    })\n\n    return await fetch(`${panel}/api/admin/v1/admin/${invoiceId}/pay`, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        body: body,\n        method: \"POST\"\n    })\n} ","import validateDomain from \"../../validate/validateDomain\";\n\n/**\n * Get all invoices on the panel\n * @param panel - The panel domain\n * @param apikey - The api key\n * @returns All invoice data\n */\nexport default async function getAllInvoicesAdmin (panel: string, apikey: string) {\n    validateDomain(panel);\n\n    return await fetch(`${panel}/api/admin/v1/invoices`, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${apikey}`\n        },\n        method: \"GET\"\n    });\n}","import createAdminTicket from \"../../functions/admin/tickets/createAdminTicket\";\nimport getTicketByIdAdmin from \"../../functions/admin/tickets/getTicketByIdAdmin\";\nimport replyToTicketAsAdmin from \"../../functions/admin/tickets/replyAdminTicket\";\nimport changeTicketStatusAdmin from \"../../functions/admin/tickets/changeTicketStatusAdmin\";\nimport getAllTickets from \"../../functions/admin/tickets/getAllAdminTickets\";\nimport getAllTicketMessages from \"../../functions/admin/tickets/getAllTicketMessagesAdmin\";\n\nimport getInvoiceDatabyIdAdmin from \"../../functions/admin/invoices/getInvoiceDataAdmin\";\nimport payInvoiceAdmin from \"../../functions/admin/invoices/payInvoiceAdmin\";\nimport getAllInvoicesAdmin from \"../../functions/admin/invoices/getAllInvoices\";\n\nclass Admin {\n  /**\n   * Ticket-related operations\n   */\n  static Ticket = class {\n    /**\n     * Creates a new ticket.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.title - The title of the ticket.\n     * @param options.message - The content of the ticket message.\n     * @param options.priority - Priority of the ticket ('low', 'medium', 'high').\n     * @param options.userId - ID of the user creating the ticket.\n     * @returns The data from the API after creating the ticket.\n     */\n    static async create(options: {\n      panel: string;\n      apikey: string;\n      title: string;\n      message: string;\n      priority: \"medium\" | \"low\" | \"high\";\n      userId: number;\n    }) {\n      return await createAdminTicket(\n        options.panel,\n        options.apikey,\n        options.title,\n        options.message,\n        options.priority,\n        options.userId\n      );\n    }\n\n    /**\n     * Retrieves ticket details by its ID.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.ticketId - The ID of the ticket.\n     * @returns The ticket details from the API.\n     */\n    static async getById(options: { panel: string; apikey: string; ticketId: string }) {\n      return await getTicketByIdAdmin(options.panel, options.apikey, options.ticketId);\n    }\n\n    /**\n     * Replies to a specific ticket.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.ticketId - The ID of the ticket to reply to.\n     * @param options.message - The content of the reply message.\n     * @returns The response data from the API after sending the reply.\n     */\n    static async reply(options: { panel: string; apikey: string; ticketId: string; message: string }) {\n      return await replyToTicketAsAdmin(options.panel, options.apikey, options.ticketId, options.message);\n    }\n\n    /**\n     * Changes the status of a specific ticket.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.ticketId - The ID of the ticket.\n     * @param options.status - The new status of the ticket ('open' or 'closed').\n     * @returns The response data from the API after changing the status.\n     */\n    static async changeStatus(options: { panel: string; apikey: string; ticketId: string; status: \"open\" | \"closed\" }) {\n      return await changeTicketStatusAdmin(options.panel, options.apikey, options.ticketId, options.status);\n    }\n\n    /**\n     * Retrieves all tickets from the system.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @returns The list of all tickets from the API.\n     */\n    static async getAll(options: { panel: string; apikey: string }) {\n      return await getAllTickets(options.panel, options.apikey);\n    }\n\n    /**\n     * Retrieves all messages from a specific ticket.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.ticketId - The ID of the ticket.\n     * @returns The list of all messages from the API for the specified ticket.\n     */\n    static async getAllMessages(options: { panel: string; apikey: string; ticketId: string }) {\n      return await getAllTicketMessages(options.panel, options.apikey, options.ticketId);\n    }\n  };\n\n  /**\n   * Invoice-related operations\n   */\n  static Invoice = class {\n    /**\n     * Retrieves invoice details by its ID.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.invoiceId - The ID of the invoice.\n     * @returns The invoice details from the API.\n     */\n    static async getById(options: { panel: string; apikey: string; invoiceId: string }) {\n      return await getInvoiceDatabyIdAdmin(options.panel, options.apikey, options.invoiceId);\n    }\n\n    /**\n     * Marks an invoice as paid.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @param options.invoiceId - The ID of the invoice to pay.\n     * @param options.payment_method - The method of payment.\n     * @returns The response data from the API after paying the invoice.\n     */\n    static async pay(options: { panel: string; apikey: string; invoiceId: string; payment_method: string }) {\n      return await payInvoiceAdmin(options.panel, options.apikey, options.invoiceId, options.payment_method);\n    }\n\n    /**\n     * Retrieves all invoices from the system.\n     * @param options - An object containing all parameters.\n     * @param options.panel - The panel URL.\n     * @param options.apikey - The API key for authentication.\n     * @returns The list of all invoices from the API.\n     */\n    static async getAll(options: { panel: string; apikey: string }) {\n      return await getAllInvoicesAdmin(options.panel, options.apikey);\n    }\n  };\n}\n\nexport default Admin;\n/*\nHow to make it so i write await Admin.Ticket.create({ panel: \"https://panel.com/\", userId: 21 }) instead of Admin.Ticket.create(\"panelUrl\", other stuff)??\n*/"],"mappings":"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","names":[]}